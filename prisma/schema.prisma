// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  hashedPassword String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  board  Board[]  @relation("BoardToUser")
  columns Column[] @relation("ColumnToUser")
  tasks   Task[]   @relation("TaskToUser")

  accounts Account[]
}

model Board {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String?  @default("New Board")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation("BoardToUser", fields: [userId], references: [id], onDelete: Cascade)
  userId String @db.ObjectId

  columns Column[] @relation("ColumnToBoard")
  tasks   Task[]   @relation("TaskToBoard")
}

model Column {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String?
  createdAt DateTime @default(now())
  UpdatedAt DateTime @updatedAt

  userId  String @db.ObjectId
  user    User   @relation("ColumnToUser", fields: [userId], references: [id], onDelete: Cascade)
  boardId String @db.ObjectId
  board   Board  @relation("ColumnToBoard", fields: [boardId], references: [id], onDelete: Cascade)

  tasks Task[] @relation("TaskToColumn")
}

model Task {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String?
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  userId String @db.ObjectId
  user   User   @relation("TaskToUser", fields: [userId], references: [id], onDelete: Cascade)

  columnId String @db.ObjectId
  column   Column @relation("TaskToColumn", fields: [columnId], references: [id], onDelete: Cascade)

  boardId String @db.ObjectId
  board  Board  @relation("TaskToBoard", fields: [boardId], references: [id], onDelete: Cascade)

  subTask SubTask[] @relation("SubTaskToTask")
}

model SubTask {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String?
  completed Boolean? @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  taskId String @db.ObjectId
  task   Task   @relation("SubTaskToTask", fields: [taskId], references: [id], onDelete: Cascade)
}